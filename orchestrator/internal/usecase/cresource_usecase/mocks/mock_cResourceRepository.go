// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock_cResourceRepository.go -package=mocks cResourceRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Uikola/distributedCalculator2/orchestrator/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockcResourceRepository is a mock of cResourceRepository interface.
type MockcResourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcResourceRepositoryMockRecorder
}

// MockcResourceRepositoryMockRecorder is the mock recorder for MockcResourceRepository.
type MockcResourceRepositoryMockRecorder struct {
	mock *MockcResourceRepository
}

// NewMockcResourceRepository creates a new mock instance.
func NewMockcResourceRepository(ctrl *gomock.Controller) *MockcResourceRepository {
	mock := &MockcResourceRepository{ctrl: ctrl}
	mock.recorder = &MockcResourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcResourceRepository) EXPECT() *MockcResourceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockcResourceRepository) Create(ctx context.Context, resource entity.CResource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockcResourceRepositoryMockRecorder) Create(ctx, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockcResourceRepository)(nil).Create), ctx, resource)
}

// Delete mocks base method.
func (m *MockcResourceRepository) Delete(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockcResourceRepositoryMockRecorder) Delete(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockcResourceRepository)(nil).Delete), ctx, name)
}

// Exists mocks base method.
func (m *MockcResourceRepository) Exists(ctx context.Context, name, address string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, name, address)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockcResourceRepositoryMockRecorder) Exists(ctx, name, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockcResourceRepository)(nil).Exists), ctx, name, address)
}

// ListCResources mocks base method.
func (m *MockcResourceRepository) ListCResources(ctx context.Context) ([]entity.CResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCResources", ctx)
	ret0, _ := ret[0].([]entity.CResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCResources indicates an expected call of ListCResources.
func (mr *MockcResourceRepositoryMockRecorder) ListCResources(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCResources", reflect.TypeOf((*MockcResourceRepository)(nil).ListCResources), ctx)
}

// SetOrchestatorHealth mocks base method.
func (m *MockcResourceRepository) SetOrchestatorHealth(ctx context.Context, name string, isAlive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrchestatorHealth", ctx, name, isAlive)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrchestatorHealth indicates an expected call of SetOrchestatorHealth.
func (mr *MockcResourceRepositoryMockRecorder) SetOrchestatorHealth(ctx, name, isAlive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrchestatorHealth", reflect.TypeOf((*MockcResourceRepository)(nil).SetOrchestatorHealth), ctx, name, isAlive)
}
