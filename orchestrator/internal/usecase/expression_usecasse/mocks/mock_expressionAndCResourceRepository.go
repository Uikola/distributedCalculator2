// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock_expressionAndCResourceRepository.go -package=mocks expressionRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Uikola/distributedCalculator2/orchestrator/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockexpressionRepository is a mock of expressionRepository interface.
type MockexpressionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockexpressionRepositoryMockRecorder
}

// MockexpressionRepositoryMockRecorder is the mock recorder for MockexpressionRepository.
type MockexpressionRepositoryMockRecorder struct {
	mock *MockexpressionRepository
}

// NewMockexpressionRepository creates a new mock instance.
func NewMockexpressionRepository(ctrl *gomock.Controller) *MockexpressionRepository {
	mock := &MockexpressionRepository{ctrl: ctrl}
	mock.recorder = &MockexpressionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexpressionRepository) EXPECT() *MockexpressionRepositoryMockRecorder {
	return m.recorder
}

// AddExpression mocks base method.
func (m *MockexpressionRepository) AddExpression(ctx context.Context, expression entity.Expression) (entity.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpression", ctx, expression)
	ret0, _ := ret[0].(entity.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExpression indicates an expected call of AddExpression.
func (mr *MockexpressionRepositoryMockRecorder) AddExpression(ctx, expression any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpression", reflect.TypeOf((*MockexpressionRepository)(nil).AddExpression), ctx, expression)
}

// GetExpressionByID mocks base method.
func (m *MockexpressionRepository) GetExpressionByID(ctx context.Context, id uint) (entity.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpressionByID", ctx, id)
	ret0, _ := ret[0].(entity.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpressionByID indicates an expected call of GetExpressionByID.
func (mr *MockexpressionRepositoryMockRecorder) GetExpressionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressionByID", reflect.TypeOf((*MockexpressionRepository)(nil).GetExpressionByID), ctx, id)
}

// ListExpressions mocks base method.
func (m *MockexpressionRepository) ListExpressions(ctx context.Context, userID uint) ([]entity.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpressions", ctx, userID)
	ret0, _ := ret[0].([]entity.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpressions indicates an expected call of ListExpressions.
func (mr *MockexpressionRepositoryMockRecorder) ListExpressions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpressions", reflect.TypeOf((*MockexpressionRepository)(nil).ListExpressions), ctx, userID)
}

// SetErrorStatus mocks base method.
func (m *MockexpressionRepository) SetErrorStatus(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetErrorStatus", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetErrorStatus indicates an expected call of SetErrorStatus.
func (mr *MockexpressionRepositoryMockRecorder) SetErrorStatus(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErrorStatus", reflect.TypeOf((*MockexpressionRepository)(nil).SetErrorStatus), ctx, id)
}

// SetSuccessStatus mocks base method.
func (m *MockexpressionRepository) SetSuccessStatus(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSuccessStatus", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSuccessStatus indicates an expected call of SetSuccessStatus.
func (mr *MockexpressionRepositoryMockRecorder) SetSuccessStatus(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuccessStatus", reflect.TypeOf((*MockexpressionRepository)(nil).SetSuccessStatus), ctx, id)
}

// UpdateCResource mocks base method.
func (m *MockexpressionRepository) UpdateCResource(ctx context.Context, expressionID, cResourceID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCResource", ctx, expressionID, cResourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCResource indicates an expected call of UpdateCResource.
func (mr *MockexpressionRepositoryMockRecorder) UpdateCResource(ctx, expressionID, cResourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCResource", reflect.TypeOf((*MockexpressionRepository)(nil).UpdateCResource), ctx, expressionID, cResourceID)
}

// UpdateResult mocks base method.
func (m *MockexpressionRepository) UpdateResult(ctx context.Context, expressionID uint, result string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResult", ctx, expressionID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResult indicates an expected call of UpdateResult.
func (mr *MockexpressionRepositoryMockRecorder) UpdateResult(ctx, expressionID, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResult", reflect.TypeOf((*MockexpressionRepository)(nil).UpdateResult), ctx, expressionID, result)
}

// MockcResourceRepository is a mock of cResourceRepository interface.
type MockcResourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcResourceRepositoryMockRecorder
}

// MockcResourceRepositoryMockRecorder is the mock recorder for MockcResourceRepository.
type MockcResourceRepositoryMockRecorder struct {
	mock *MockcResourceRepository
}

// NewMockcResourceRepository creates a new mock instance.
func NewMockcResourceRepository(ctrl *gomock.Controller) *MockcResourceRepository {
	mock := &MockcResourceRepository{ctrl: ctrl}
	mock.recorder = &MockcResourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcResourceRepository) EXPECT() *MockcResourceRepositoryMockRecorder {
	return m.recorder
}

// AssignExpressionToCResource mocks base method.
func (m *MockcResourceRepository) AssignExpressionToCResource(ctx context.Context, expression entity.Expression) (entity.CResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignExpressionToCResource", ctx, expression)
	ret0, _ := ret[0].(entity.CResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignExpressionToCResource indicates an expected call of AssignExpressionToCResource.
func (mr *MockcResourceRepositoryMockRecorder) AssignExpressionToCResource(ctx, expression any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignExpressionToCResource", reflect.TypeOf((*MockcResourceRepository)(nil).AssignExpressionToCResource), ctx, expression)
}

// UnlinkExpressionFromCResource mocks base method.
func (m *MockcResourceRepository) UnlinkExpressionFromCResource(ctx context.Context, expression entity.Expression) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkExpressionFromCResource", ctx, expression)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkExpressionFromCResource indicates an expected call of UnlinkExpressionFromCResource.
func (mr *MockcResourceRepositoryMockRecorder) UnlinkExpressionFromCResource(ctx, expression any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkExpressionFromCResource", reflect.TypeOf((*MockcResourceRepository)(nil).UnlinkExpressionFromCResource), ctx, expression)
}

// Mockcache is a mock of cache interface.
type Mockcache struct {
	ctrl     *gomock.Controller
	recorder *MockcacheMockRecorder
}

// MockcacheMockRecorder is the mock recorder for Mockcache.
type MockcacheMockRecorder struct {
	mock *Mockcache
}

// NewMockcache creates a new mock instance.
func NewMockcache(ctrl *gomock.Controller) *Mockcache {
	mock := &Mockcache{ctrl: ctrl}
	mock.recorder = &MockcacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcache) EXPECT() *MockcacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *Mockcache) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcacheMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockcache)(nil).Get), ctx, key)
}
