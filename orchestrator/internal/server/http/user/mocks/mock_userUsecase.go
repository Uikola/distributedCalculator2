// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mock_userUsecase.go -package=mocks userUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Uikola/distributedCalculator2/orchestrator/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockuserUseCase is a mock of userUseCase interface.
type MockuserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockuserUseCaseMockRecorder
}

// MockuserUseCaseMockRecorder is the mock recorder for MockuserUseCase.
type MockuserUseCaseMockRecorder struct {
	mock *MockuserUseCase
}

// NewMockuserUseCase creates a new mock instance.
func NewMockuserUseCase(ctrl *gomock.Controller) *MockuserUseCase {
	mock := &MockuserUseCase{ctrl: ctrl}
	mock.recorder = &MockuserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserUseCase) EXPECT() *MockuserUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockuserUseCase) Create(ctx context.Context, request entity.RegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockuserUseCaseMockRecorder) Create(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserUseCase)(nil).Create), ctx, request)
}

// ListOperations mocks base method.
func (m *MockuserUseCase) ListOperations(ctx context.Context) (map[string]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", ctx)
	ret0, _ := ret[0].(map[string]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockuserUseCaseMockRecorder) ListOperations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockuserUseCase)(nil).ListOperations), ctx)
}

// Login mocks base method.
func (m *MockuserUseCase) Login(ctx context.Context, request entity.LoginRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockuserUseCaseMockRecorder) Login(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockuserUseCase)(nil).Login), ctx, request)
}

// ParseToken mocks base method.
func (m *MockuserUseCase) ParseToken(ctx context.Context, accessToken string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, accessToken)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockuserUseCaseMockRecorder) ParseToken(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockuserUseCase)(nil).ParseToken), ctx, accessToken)
}

// UpdateOperation mocks base method.
func (m *MockuserUseCase) UpdateOperation(ctx context.Context, request entity.UpdateOperationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperation", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperation indicates an expected call of UpdateOperation.
func (mr *MockuserUseCaseMockRecorder) UpdateOperation(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperation", reflect.TypeOf((*MockuserUseCase)(nil).UpdateOperation), ctx, request)
}
